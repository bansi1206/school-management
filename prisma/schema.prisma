// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL") // Only needed when using a cloud provider that doesn't support the creation of new databases, like Heroku. Learn more: https://pris.ly/d/migrate-shadow
  relationMode      = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

enum UserRole {
  User
  Student
  Teacher
  SuperAdmin
}

enum UserStatus {
  Inactive
  Actived
  Blocked
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  role          UserRole   @default(User)
  status        UserStatus @default(Actived)
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  bio           String?

  accounts Account[]
  sessions Session[]
  students Student[]
  teachers Teacher[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Student {
  id     String     @id @default(cuid())
  userId String  
  // onlineClassId String
  classId  String
  name   String
  dob    String
  phone  String?
  gender String?

  user          User?       @relation(fields: [userId], references: [id], onDelete: Cascade)
  class         Class?      @relation(fields: [classId], references: [id], onDelete: Cascade)
  // onlineClass    OnlineClass? @relation(fields: [onlineClassId], references: [id], onDelete: Cascade)

  @@index([userId])    
  @@index([classId])  
  // @@index([onlineClassId])  
}

model Teacher {
  id     String     @id @default(cuid())
  userId String 
  // onlineClassId String  
  name   String
  dob    String  
  phone  String?
  gender String?
  department String?
  

  user          User?       @relation(fields: [userId], references: [id], onDelete: Cascade)
//  onlineClass    OnlineClass? @relation(fields: [onlineClassId], references: [id], onDelete: Cascade)

  @@index([userId])   
  // @@index([onlineClassId])   
}

model Class{
  id    String     @id @default(cuid())
  title  String
  

  students Student[]
}

// model OnlineClass{
//  id    String     @id @default(cuid())
//  title  String
//  time  DateTime

//  students Student[]
//  teachers Teacher[]
// }

